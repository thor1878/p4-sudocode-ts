// Generated from SudoLexer.g4 by ANTLR 4.9.0-SNAPSHOT


    import LexerHelper from '../helpers/LexerHelper'


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SudoLexer extends Lexer {
	public static readonly NEWLINE = 1;
	public static readonly INDENT = 2;
	public static readonly DEDENT = 3;
	public static readonly ERR_DEDENT = 4;
	public static readonly L_PAREN = 5;
	public static readonly R_PAREN = 6;
	public static readonly L_CURLY = 7;
	public static readonly R_CURLY = 8;
	public static readonly L_BRACK = 9;
	public static readonly R_BRACK = 10;
	public static readonly ADD = 11;
	public static readonly SUB = 12;
	public static readonly MULT = 13;
	public static readonly DIVD = 14;
	public static readonly MOD = 15;
	public static readonly COLON = 16;
	public static readonly SEMI = 17;
	public static readonly COMMA = 18;
	public static readonly COMPARISON = 19;
	public static readonly RULE = 20;
	public static readonly APPLY = 21;
	public static readonly EXPECTS = 22;
	public static readonly FOR = 23;
	public static readonly IF = 24;
	public static readonly TO = 25;
	public static readonly FROM = 26;
	public static readonly OR = 27;
	public static readonly AND = 28;
	public static readonly GLOBAL = 29;
	public static readonly VAL = 30;
	public static readonly SUM = 31;
	public static readonly LEN = 32;
	public static readonly NUMBER = 33;
	public static readonly POS_NUMBER = 34;
	public static readonly ID = 35;
	public static readonly WHITESPACE = 36;
	public static readonly IGNORE = 37;
	public static readonly COMMENT = 38;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACK", "R_BRACK", "ADD", 
		"SUB", "MULT", "DIVD", "MOD", "COLON", "SEMI", "COMMA", "COMPARISON", 
		"RULE", "APPLY", "EXPECTS", "FOR", "IF", "TO", "FROM", "OR", "AND", "GLOBAL", 
		"VAL", "SUM", "LEN", "NUMBER", "POS_NUMBER", "ID", "WHITESPACE", "IGNORE", 
		"COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'%'", "':'", "';'", 
		"','", undefined, "'rule'", "'apply'", "'expects'", "'for'", "'if'", "'to'", 
		"'from'", "'or'", "'and'", undefined, "'val'", "'sum'", "'len'", undefined, 
		undefined, undefined, undefined, "' '",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "NEWLINE", "INDENT", "DEDENT", "ERR_DEDENT", "L_PAREN", "R_PAREN", 
		"L_CURLY", "R_CURLY", "L_BRACK", "R_BRACK", "ADD", "SUB", "MULT", "DIVD", 
		"MOD", "COLON", "SEMI", "COMMA", "COMPARISON", "RULE", "APPLY", "EXPECTS", 
		"FOR", "IF", "TO", "FROM", "OR", "AND", "GLOBAL", "VAL", "SUM", "LEN", 
		"NUMBER", "POS_NUMBER", "ID", "WHITESPACE", "IGNORE", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SudoLexer._LITERAL_NAMES, SudoLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SudoLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	    helper: LexerHelper = new LexerHelper();
	    
	    nextToken = () => this.helper.nextToken(() => super.nextToken())


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SudoLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "SudoLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return SudoLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SudoLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SudoLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SudoLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02(\xEC\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x05\x10n\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x05\x1A\xAE\n\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x05\x1E\xBD" +
		"\n\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x07\x1F\xC4\n\x1F\f\x1F" +
		"\x0E\x1F\xC7\v\x1F\x05\x1F\xC9\n\x1F\x03 \x03 \x07 \xCD\n \f \x0E \xD0" +
		"\v \x03!\x05!\xD3\n!\x03!\x03!\x07!\xD7\n!\f!\x0E!\xDA\v!\x06!\xDC\n!" +
		"\r!\x0E!\xDD\x03\"\x03\"\x03\"\x03\"\x03#\x03#\x07#\xE6\n#\f#\x0E#\xE9" +
		"\v#\x03#\x03#\x02\x02\x02$\x03\x02\x07\x05\x02\b\x07\x02\t\t\x02\n\v\x02" +
		"\v\r\x02\f\x0F\x02\r\x11\x02\x0E\x13\x02\x0F\x15\x02\x10\x17\x02\x11\x19" +
		"\x02\x12\x1B\x02\x13\x1D\x02\x14\x1F\x02\x15!\x02\x16#\x02\x17%\x02\x18" +
		"\'\x02\x19)\x02\x1A+\x02\x1B-\x02\x1C/\x02\x1D1\x02\x1E3\x02\x1F5\x02" +
		" 7\x02!9\x02\";\x02#=\x02$?\x02%A\x02&C\x02\'E\x02(\x03\x02\x07\x03\x02" +
		"3;\x03\x022;\x04\x02C\\c|\x05\x022;C\\c|\x04\x02\f\f\x0F\x0F\x02\xFB\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B" +
		"\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03" +
		"\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02" +
		"\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02" +
		"C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x03G\x03\x02\x02\x02\x05I\x03\x02" +
		"\x02\x02\x07K\x03\x02\x02\x02\tM\x03\x02\x02\x02\vO\x03\x02\x02\x02\r" +
		"Q\x03\x02\x02\x02\x0FS\x03\x02\x02\x02\x11U\x03\x02\x02\x02\x13W\x03\x02" +
		"\x02\x02\x15Y\x03\x02\x02\x02\x17[\x03\x02\x02\x02\x19]\x03\x02\x02\x02" +
		"\x1B_\x03\x02\x02\x02\x1Da\x03\x02\x02\x02\x1Fm\x03\x02\x02\x02!o\x03" +
		"\x02\x02\x02#t\x03\x02\x02\x02%z\x03\x02\x02\x02\'\x82\x03\x02\x02\x02" +
		")\x86\x03\x02\x02\x02+\x89\x03\x02\x02\x02-\x8C\x03\x02\x02\x02/\x91\x03" +
		"\x02\x02\x021\x94\x03\x02\x02\x023\xAD\x03\x02\x02\x025\xAF\x03\x02\x02" +
		"\x027\xB3\x03\x02\x02\x029\xB7\x03\x02\x02\x02;\xBC\x03\x02\x02\x02=\xC8" +
		"\x03\x02\x02\x02?\xCA\x03\x02\x02\x02A\xDB\x03\x02\x02\x02C\xDF\x03\x02" +
		"\x02\x02E\xE3\x03\x02\x02\x02GH\x07*\x02\x02H\x04\x03\x02\x02\x02IJ\x07" +
		"+\x02\x02J\x06\x03\x02\x02\x02KL\x07}\x02\x02L\b\x03\x02\x02\x02MN\x07" +
		"\x7F\x02\x02N\n\x03\x02\x02\x02OP\x07]\x02\x02P\f\x03\x02\x02\x02QR\x07" +
		"_\x02\x02R\x0E\x03\x02\x02\x02ST\x07-\x02\x02T\x10\x03\x02\x02\x02UV\x07" +
		"/\x02\x02V\x12\x03\x02\x02\x02WX\x07,\x02\x02X\x14\x03\x02\x02\x02YZ\x07" +
		"1\x02\x02Z\x16\x03\x02\x02\x02[\\\x07\'\x02\x02\\\x18\x03\x02\x02\x02" +
		"]^\x07<\x02\x02^\x1A\x03\x02\x02\x02_`\x07=\x02\x02`\x1C\x03\x02\x02\x02" +
		"ab\x07.\x02\x02b\x1E\x03\x02\x02\x02cd\x07?\x02\x02dn\x07?\x02\x02ef\x07" +
		"#\x02\x02fn\x07?\x02\x02gh\x07@\x02\x02hn\x07?\x02\x02in\x07@\x02\x02" +
		"jk\x07>\x02\x02kn\x07?\x02\x02ln\x07>\x02\x02mc\x03\x02\x02\x02me\x03" +
		"\x02\x02\x02mg\x03\x02\x02\x02mi\x03\x02\x02\x02mj\x03\x02\x02\x02ml\x03" +
		"\x02\x02\x02n \x03\x02\x02\x02op\x07t\x02\x02pq\x07w\x02\x02qr\x07n\x02" +
		"\x02rs\x07g\x02\x02s\"\x03\x02\x02\x02tu\x07c\x02\x02uv\x07r\x02\x02v" +
		"w\x07r\x02\x02wx\x07n\x02\x02xy\x07{\x02\x02y$\x03\x02\x02\x02z{\x07g" +
		"\x02\x02{|\x07z\x02\x02|}\x07r\x02\x02}~\x07g\x02\x02~\x7F\x07e\x02\x02" +
		"\x7F\x80\x07v\x02\x02\x80\x81\x07u\x02\x02\x81&\x03\x02\x02\x02\x82\x83" +
		"\x07h\x02\x02\x83\x84\x07q\x02\x02\x84\x85\x07t\x02\x02\x85(\x03\x02\x02" +
		"\x02\x86\x87\x07k\x02\x02\x87\x88\x07h\x02\x02\x88*\x03\x02\x02\x02\x89" +
		"\x8A\x07v\x02\x02\x8A\x8B\x07q\x02\x02\x8B,\x03\x02\x02\x02\x8C\x8D\x07" +
		"h\x02\x02\x8D\x8E\x07t\x02\x02\x8E\x8F\x07q\x02\x02\x8F\x90\x07o\x02\x02" +
		"\x90.\x03\x02\x02\x02\x91\x92\x07q\x02\x02\x92\x93\x07t\x02\x02\x930\x03" +
		"\x02\x02\x02\x94\x95\x07c\x02\x02\x95\x96\x07p\x02\x02\x96\x97\x07f\x02" +
		"\x02\x972\x03\x02\x02\x02\x98\x99\x07E\x02\x02\x99\x9A\x07G\x02\x02\x9A" +
		"\x9B\x07N\x02\x02\x9B\x9C\x07N\x02\x02\x9C\xAE\x07U\x02\x02\x9D\x9E\x07" +
		"T\x02\x02\x9E\x9F\x07Q\x02\x02\x9F\xA0\x07Y\x02\x02\xA0\xAE\x07U\x02\x02" +
		"\xA1\xA2\x07E\x02\x02\xA2\xA3\x07Q\x02\x02\xA3\xA4\x07N\x02\x02\xA4\xA5" +
		"\x07W\x02\x02\xA5\xA6\x07O\x02\x02\xA6\xA7\x07P\x02\x02\xA7\xAE\x07U\x02" +
		"\x02\xA8\xA9\x07D\x02\x02\xA9\xAA\x07Q\x02\x02\xAA\xAB\x07Z\x02\x02\xAB" +
		"\xAC\x07G\x02\x02\xAC\xAE\x07U\x02\x02\xAD\x98\x03\x02\x02\x02\xAD\x9D" +
		"\x03\x02\x02\x02\xAD\xA1\x03\x02\x02\x02\xAD\xA8\x03\x02\x02\x02\xAE4" +
		"\x03\x02\x02\x02\xAF\xB0\x07x\x02\x02\xB0\xB1\x07c\x02\x02\xB1\xB2\x07" +
		"n\x02\x02\xB26\x03\x02\x02\x02\xB3\xB4\x07u\x02\x02\xB4\xB5\x07w\x02\x02" +
		"\xB5\xB6\x07o\x02\x02\xB68\x03\x02\x02\x02\xB7\xB8\x07n\x02\x02\xB8\xB9" +
		"\x07g\x02\x02\xB9\xBA\x07p\x02\x02\xBA:\x03\x02\x02\x02\xBB\xBD\x07/\x02" +
		"\x02\xBC\xBB\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBE\x03\x02\x02" +
		"\x02\xBE\xBF\x05=\x1F\x02\xBF<\x03\x02\x02\x02\xC0\xC9\x072\x02\x02\xC1" +
		"\xC5\t\x02\x02\x02\xC2\xC4\t\x03\x02\x02\xC3\xC2\x03\x02\x02\x02\xC4\xC7" +
		"\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC5\xC6\x03\x02\x02\x02\xC6\xC9" +
		"\x03\x02\x02\x02\xC7\xC5\x03\x02\x02\x02\xC8\xC0\x03\x02\x02\x02\xC8\xC1" +
		"\x03\x02\x02\x02\xC9>\x03\x02\x02\x02\xCA\xCE\t\x04\x02\x02\xCB\xCD\t" +
		"\x05\x02\x02\xCC\xCB\x03\x02\x02\x02\xCD\xD0\x03\x02\x02\x02\xCE\xCC\x03" +
		"\x02\x02\x02\xCE\xCF\x03\x02\x02\x02\xCF@\x03\x02\x02\x02\xD0\xCE\x03" +
		"\x02\x02\x02\xD1\xD3\x07\x0F\x02\x02\xD2\xD1\x03\x02\x02\x02\xD2\xD3\x03" +
		"\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\xD8\x07\f\x02\x02\xD5\xD7\x07" +
		"\"\x02\x02\xD6\xD5\x03\x02\x02\x02\xD7\xDA\x03\x02\x02\x02\xD8\xD6\x03" +
		"\x02\x02\x02\xD8\xD9\x03\x02\x02\x02\xD9\xDC\x03\x02\x02\x02\xDA\xD8\x03" +
		"\x02\x02\x02\xDB\xD2\x03\x02\x02\x02\xDC\xDD\x03\x02\x02\x02\xDD\xDB\x03" +
		"\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDEB\x03\x02\x02\x02\xDF\xE0\x07" +
		"\"\x02\x02\xE0\xE1\x03\x02\x02\x02\xE1\xE2\b\"\x02\x02\xE2D\x03\x02\x02" +
		"\x02\xE3\xE7\x07%\x02\x02\xE4\xE6\n\x06\x02\x02\xE5\xE4\x03\x02\x02\x02" +
		"\xE6\xE9\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02" +
		"\xE8\xEA\x03\x02\x02\x02\xE9\xE7\x03\x02\x02\x02\xEA\xEB\b#\x02\x02\xEB" +
		"F\x03\x02\x02\x02\r\x02m\xAD\xBC\xC5\xC8\xCE\xD2\xD8\xDD\xE7\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SudoLexer.__ATN) {
			SudoLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SudoLexer._serializedATN));
		}

		return SudoLexer.__ATN;
	}

}

